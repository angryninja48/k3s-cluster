---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 45.8.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      config:
        global:
          slack_api_url: ${SECRET_SLACK_WEBHOOK_URL}
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: slack
            slack_configs:
              - channel: '#monitoring'
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: Prometheus
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{
                  .Labels.severity }}`{{ end }}

                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary
                  }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message
                  }} {{ else if ne .Annotations.description ""}}*Description:* {{
                  .Annotations.description }}{{ end }}

                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "slack"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "slack"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: "Alert Manager"
          hajimari.io/icon: mdi:alert-decagram-outline
        hosts:
          - &host alert-manager.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host

      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 5Gi

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels: ["node"]
            targetLabel: instance

    kube-state-metrics:
      metricLabelsAllowlist: ["persistentvolumeclaims=[*]"]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.20.0.14
        - 10.20.0.15
        - 10.20.0.16

    kubeScheduler:
      enabled: true
      endpoints:
        - 10.20.0.14
        - 10.20.0.15
        - 10.20.0.16

    kubeProxy:
      enabled: false # Enable if not using eBPF
      # endpoints:
      #   - 10.20.0.14
      #   - 10.20.0.15
      #   - 10.20.0.16

    kubeEtcd:
      enabled: true
      endpoints:
        - 10.20.0.14
        - 10.20.0.15
        - 10.20.0.16
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
        pathType: Prefix
        hosts:
          - &host prometheus.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host

      thanosService:
        enabled: true

      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: __replica__ # must match with thanos value `.query.replicaLabel[0]`
        # Breaks any metric that has an existing "cluster" label on a metric
        # externalLabels:
        #   cluster: home # must match with thanos value `.ruler.clusterName`
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml

        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        retentionSize: 6GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            cpu: 150m
            memory: 2000Mi
          limits:
            memory: 7000Mi
        additionalScrapeConfigs:
          - job_name: home-assistant
            scrape_interval: 60s
            metrics_path: /api/prometheus
          # https://developers.home-assistant.io/docs/auth_api/#long-lived-access-token
            bearer_token: ${SECRET_HASS_PROM_TOKEN}
          # scheme: http
            static_configs:
              - targets: [home-assistant.home.svc:8123]
          - job_name: minio-job
            bearer_token: ${SECRET_MINIO_PROM_TOKEN}
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            static_configs:
              - targets: ['${SECRET_NAS_IP}:9000']
